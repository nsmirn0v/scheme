 <!-- Terminal -->
 <section class="row">
  <div class="span12">

    <h3 class="text-center">("Simple Scheme Interpreter" . "<small>
        by 
        <a href="http://www.linkedin.com/pub/nikolay-smirnov/22/ba7/5a1" target="_blank">
          Nikolay Smirnov</a>
        (CS152 Project)
      </small>")
    </h3>

    <div class="terminal">

      <div>
        <div id="output"></div>

        <div class="input-prepend">
          <span class="add-on">></span>
          <input class="span11" id="input"></input>
        </div>
      </div>

    </div>

    <p class="muted text-center">
      Use
      <code><i class="icon-arrow-up"></i></code> or <code><i class="icon-arrow-down"></i></code>
      keys to scroll through previous commands. Type <code>clear</code> to clear terminal output.
      Use <code> Ctrl + C</code> to exit multiline input.
    </p><br>

    <ul class="nav nav-tabs" id="tabs">
      <li class="active"><a href="#info">Info</a></li>
      <li><a href="#debug">Debug</a></li>
      <li><a href="#symbol-table">Symbol table</a></li>
    </ul>
     
    <div class="tab-content">
      <div class="tab-pane fade in active" id="info">
        
        <table class="table table-bordered">
          <tr>
            <th>Procedures</th>
            <td>
              <code data-toggle="tooltip" data-original-title="( cons <sexpr> <sexpr> )">
                cons</code>,
              <code data-toggle="tooltip" data-original-title="( car <sexpr> ) NOTE: <sexpr> must evalutate to cons or list">
                car</code>, 
              <code data-toggle="tooltip" data-original-title="( cdr <sexpr> ) NOTE: <sexpr> must evalutate to cons or list">
                cdr</code>, 
              <code data-toggle="tooltip" data-original-title="( list <sexpr> ... )">
                list</code>, 
              <code data-toggle="tooltip" data-original-title="( quote ( <sexpr> ... ) )">
                quote</code>, 
              <code data-toggle="tooltip" data-original-title="( + <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                +</code> , 
              <code data-toggle="tooltip" data-original-title="( - <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                -</code>,
              <code data-toggle="tooltip" data-original-title="( * <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                *</code>, 
              <code data-toggle="tooltip" data-original-title="( / <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                /</code>, 
              <code data-toggle="tooltip" data-original-title="( < <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                <</code>, 
              <code data-toggle="tooltip" data-original-title="( > <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                ></code>, 
              <code data-toggle="tooltip" data-original-title="( = <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                =</code>,
              <code data-toggle="tooltip" data-original-title="( <= <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                <=</code> , 
              <code data-toggle="tooltip" data-original-title="( >= <sexpr> ... ) NOTE: <sexpr> must evalutate to number">
                >=</code>, 
              <code data-toggle="tooltip" data-original-title="( or <sexpr> ... ) NOTE: <sexpr> must evalutate to boolean">
                or</code>, 
              <code data-toggle="tooltip" data-original-title="( and <sexpr> ... ) NOTE: <sexpr> must evalutate to boolean">
                and</code>
            </td>
          </tr>
          <tr>
            <th>Macros</th>
            <td>
              <code data-toggle="tooltip" data-original-title="( def <varname> <sexpr> )">
                def</code>, 
              <code data-toggle="tooltip" data-original-title="( if <sexpr> <then_sexpr> <else_sexpr> ) NOTE: <else_sexpr> is optional">
                if</code>, 
              <code data-toggle="tooltip" data-original-title="( lambda (<varname> ... ) <sexpr> )">
                lambda</code>
            </td>
          </tr>
        </table>

        <pre class="example">
          <span class="test-run">Test run</span>
> (def factorial 
    (lambda 
      (x) 
      (if (or (= x 0) (= x 1)) 
        1 
        (* x (factorial (- x 1))))))
<span class="text-success">procedure factorial(x)</span>

> (factorial 0)
<span class="text-success">1</span>

> (factorial 4)
<span class="text-success">24</span>

> (def createList 
    (lambda 
      (x) 
      (if 
        (= x 0) 
        (cons 0 ())
        (cons x (createList (- x 1))))))
<span class="text-success">procedure createList(x)</span>

> (createList 5)
<span class="text-success">(5 4 3 2 1 0)</span>

> (def num 10)
<span class="text-success">10</span>

> (def l (createList num))
<span class="text-success">(10 9 8 7 6 5 4 3 2 1 0)</span>

> l
<span class="text-success">(10 9 8 7 6 5 4 3 2 1 0)</span>

> (def fibonacci 
    (lambda 
      (x y limit)
      (if (= limit 0) 
        (list 0 1)
        (if (and (= x 0) (= y 1))
          (cons 0 (cons 1 (fibonacci (+ x y) y limit)))
          (if (>= (+ x y) limit) 
            (cons x ())
            (cons x (fibonacci (+ x y) x limit)))))))
<span class="text-success">procedure fibonacci(x y limit)</span>

> (def f (lambda (limit) (fibonacci 0 1 limit)))
<span class="text-success">procedure f(limit)</span>

> (f 0)
<span class="text-success">(0 1)</span>

> (f 1)
<span class="text-success">(0 1 1)</span>

> (f 100)
<span class="text-success">(0 1 1 2 3 5 8 13 21 34 55 89)</span>

> a
<span class="text-error">ERROR: Unbound variable: a.</span>

> (def a 5)
<span class="text-success">5</span>

> (def b 6)
<span class="text-success">6</span>

> (def lte (lambda (x y) (<= x y)))
<span class="text-success">procedure lte(x y)</span>

> (lte a b)
<span class="text-success">#t</span>

> (def sum (lambda (x) (+ x x)))
<span class="text-success">procedure sum(x)</span>

> (sum a)
<span class="text-success">10</span>

> (def sqr (lambda (x) (* x x)))
<span class="text-success">procedure sqr(x)</span>

> (sqr a)
<span class="text-success">25</span>

> (def ss (lambda (x) (sum (sqr x))))
<span class="text-success">procedure ss(x)</span>

> (ss a)
<span class="text-success">50</span>

> (ss b)
<span class="text-success">72</span>

> (def fn 
    (lambda 
      (x) 
      (if 
        (lte (ss x) 100) 
        "ss(x) is less than 100"
        "ss(x) is greater than 100")))
<span class="text-success">procedure fn(x)</span>

> (fn a)
<span class="text-success">"ss(x) is less than 100"</span>

> (fn 10)
<span class="text-success">"ss(x) is greater than 100"</span>

> (def c (fn a))
<span class="text-success">"ss(x) is less than 100"</span>

> c
<span class="text-success">"ss(x) is less than 100"</span>

> (cons a b c)
<span class="text-error">ERROR: Wrong number of arguments to procedure cons.</span>

> (cons a c)
<span class="text-success">(5 . "ss(x) is less than 100")</span>
</pre>
        
      </div>

      <div class="tab-pane fade" id="debug">
        <div class="row">
          <div class="span6">
            <p class="muted">Result of <code>parse()</code> function</p>
            <pre id="parse"></pre>
          </div>
          <div class="span6">
            <p class="muted">Result of <code>eval()</code> function</p>
            <pre id="eval"></pre>
          </div>
        </div>
      </div>

      <div class="tab-pane fade" id="symbol-table">
        <p class="muted">Result of <code>addVariable()</code> function</p>
        <pre id="vars"></pre>
      </div>
      
    </div>

  </div>
 </section>